name: Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test --if-present
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        TELEGRAM_BOT_TOKEN: test_token
        OPENAI_API_KEY: test_key
    
    - name: Check environment variables
      run: |
        echo "Checking required environment variables..."
        [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] && echo "‚úÖ TELEGRAM_BOT_TOKEN is set" || echo "‚ùå TELEGRAM_BOT_TOKEN is missing"
        [ -n "${{ secrets.OPENAI_API_KEY }}" ] && echo "‚úÖ OPENAI_API_KEY is set" || echo "‚ùå OPENAI_API_KEY is missing"
        [ -n "${{ secrets.RENDER_DEPLOY_HOOK }}" ] && echo "‚úÖ RENDER_DEPLOY_HOOK is set" || echo "‚ùå RENDER_DEPLOY_HOOK is missing"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      if: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
        echo "‚úÖ Deployment triggered on Render"
    
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
    
    - name: Health check
      run: |
        echo "üîç Performing health check..."
        for i in {1..5}; do
          if curl -f https://math-tutor-bot.onrender.com/health; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "‚ùå Health check failed after 5 attempts"
        exit 1
    
    - name: Create deployment status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "üöÄ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi 